<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DataSource 등록 : DataSource는 서버 구동 시 동시에 연결이 되어야 함 아래에서 DataSource를 
		참조할 수 있도록 가장 상단에 작성할 것 destroy-method : 해당 객체가 삭제 되기 전에 실행 되어야 할 기능이 있는 경우 
		정의하는 속성 => 주어진 세션을 자동으로 close 하라는 의미 -->
	<!-- BasicDataSource dataSource = new BasicDataSource() dataSource.setDriverClassName("..."); 
		dataSource.setUrl("..."); 위와 같은 코드를 작성하는 것이 아니라 XML 설정 파일에 bean을 등록하여 객체에 
		대한 설정을 제공하면 spring framework가 구동되며 객체를 생성하고 사용하고 소멸시킴 설정을 등록하는 것 => DI(의존성 
		주입) -->


	<!-- ourwork 파이널 프로젝트 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> 
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/> 
		<property name="username" value="ourwork"/> 
		<property name="password" value="ourwork"/> 
		<property name="defaultAutoCommit" value="false"/> 
	</bean>


	<!-- log4j : 기존 dataSource id 변경 후 참조하는 proxyDataSource 만들기 -->
	<!-- <bean id="dataSourceSpied"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="spring" />
		<property name="password" value="spring" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	<bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceSpied" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE" />
				<property name="sqlPrefix" value="[SQL] " />
			</bean>
		</property>
	</bean> -->


	<!-- 트랜잭션 처리 (commit/rollback) 트랜잭션 처리를 위한 트랜잭션 매니저 추가 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- Transaction 추가 : Namespaces Tab에서 tx 추가 후 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- name 속성에는 메소드의 패턴 작성
			 rollback-for 속성은 특정 예외가 발생했을 시 강제로 rollback 하는 설정
			 read-only 읽기 전용 트랜잭션에 적용 해당 트랜잭션에서 DML 작업이 일어나면 예외 발생 됨 -->
		<tx:attributes>
			<tx:method name="select*" read-only="true" rollback-for="Exception"/>
			<tx:method name="insert*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="delete*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<!-- AOP 추가 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.kh.ourwork..*Impl.*(..))" id="serviceMethod"/>
		<aop:advisor advice-ref="txAdvice" id="transactionAdvisor" pointcut-ref="serviceMethod"/>
	</aop:config>




	<!-- 마이바티스 SqlSession 등록하기 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mybatis-config.xml 설정 불러와서 세팅 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- ref=""는 객체를 참조할 때 사용 SqlSessionFactoryBean sqlSession = new SqlSessionFactoryBean(); 
			sqlSession.setDataSource(dataSource); <= 위에 등록한 dataSource 객체를 setter에 전달함 -->
	</bean>

	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>

	<!-- 파일 업로드 관련 bean 등록 -->
	<!-- MultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000" />
		<property name="maxInMemorySize" value="100000000" />
	</bean>
</beans>